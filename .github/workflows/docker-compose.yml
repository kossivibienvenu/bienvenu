#version: '3.8'

services:
  app:
    image: python:3.7
    container_name: python_app
    command: bash -c "pip install -r requirements.txt && python app.py"
    volumes:
      - ./:/usr/src/app
    working_dir: /usr/src/app
    
    depends_on:
      - db

  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=bienvenu
      - POSTGRES_PASSWORD=0712
    ports:
      - "8023:8023"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:





name: Docker Image CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-image1-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Login to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        username: nologin
        password: ${{ secrets.SCALEWAY_API_KEY }}
        registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}
    - name: Build the Docker image
      run: docker-compose build backend -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1
    - name: Push the Docker Image
      run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/groupe-2

  build-image2-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Login to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        username: nologin
        password: ${{ secrets.SCALEWAY_API_KEY }}
        registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}
    - name: Build the Docker image
      run: docker-compose build frontend -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image2
    - name: Push the Docker Image
      run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/groupe-2


  deploy:
      runs-on: ubuntu-latest
      needs: [build-image]
      steps:
        - name: Deploy app
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SCALEWAY_HOST }}
            username: ${{ secrets.SCALEWAY_USER }}
            key: ${{ secrets.SCALEWAY_SSH_KEY }}
            port: 22
            # stop, remove and update step by step
            script: |
              cd ./bienvenu
              docker-compose down  true
              docker rm .  true
              docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1
              docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image2
              docker-compose up -d 







              # cd leisure-experience-app
              # docker-compose -f docker-compose.test.yml down
              # docker load < django.tar
              # docker load < nextjs.tar
              # COMPOSE_HTTP_TIMEOUT=200 docker-compose -f docker-compose.test.yml up -d


name: Docker Image CI

# Déclencheurs pour exécuter le pipeline sur push et pull request vers la branche main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Jobs qui seront exécutés
jobs:
  # Job pour construire et pousser l'image Docker du backend
  build-image1-backend:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source du dépôt
      - uses: actions/checkout@v4

      # Étape 2 : Connexion au registre de conteneurs Scaleway
      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      # Étape 3 : Construction de l'image Docker pour le backend
      - name: Build the Docker image
        run: docker-compose build backend -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1

      # Étape 4 : Pousser l'image Docker du backend
      - name: Push the Docker Image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1

  # Job pour construire et pousser l'image Docker du frontend
  build-image2-frontend:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source du dépôt
      - uses: actions/checkout@v4

      # Étape 2 : Connexion au registre de conteneurs Scaleway
      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      # Étape 3 : Construction de l'image Docker pour le frontend
      - name: Build the Docker image
        run: docker-compose build frontend -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image2

      # Étape 4 : Pousser l'image Docker du frontend
      - name: Push the Docker Image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image2

  # Job pour déployer les images sur le serveur distant
  deploy:
    runs-on: ubuntu-latest
    needs: [build-image1-backend, build-image2-frontend]  # Exécuter seulement après les jobs de build
    steps:
      # Connexion SSH au serveur pour déployer l'application
      - name: Deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SCALEWAY_HOST }}
          username: ${{ secrets.SCALEWAY_USER }}
          key: ${{ secrets.SCALEWAY_SSH_KEY }}
          port: 22
          script: |
            cd ./bienvenu  # Se déplacer vers le répertoire contenant docker-compose.yml
            docker-compose down           # Arrêter les conteneurs actuels
            docker rm $(docker ps -a -q)  # Supprimer les anciens conteneurs
            docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1  # Tirer la nouvelle image backend
            docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image2  # Tirer la nouvelle image frontend
            docker-compose up -d          # Relancer les conteneurs en arrière-plan

